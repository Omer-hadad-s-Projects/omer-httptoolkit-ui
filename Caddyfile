{
    auto_https off
}

:80 {
    log
    encode zstd gzip

    @wasm path *.wasm
    header @wasm Content-Type "application/wasm"

    rewrite /update-worker.js /ui-update-worker.js

    root * /site
    # Proxy API requests to the backend server running on the Pi.
    # The server container is started with `network_mode: host` and binds to
    # 0.0.0.0 on the Pi, so the UI container must reach the host.
    # Prefer using `host.docker.internal` from inside the UI container if available;
    # on some Raspberry Pi / Linux Docker installs this name may not exist. If it
    # doesn't, replace `host.docker.internal` with the Pi's LAN IP (e.g. 192.168.x.x)
    # or run the UI container with `network_mode: host` as well.

    # Route client-facing API requests to the server API port (45457).
    # The server exposes its API on port 45457; Caddy will proxy /api/* to it.
    @api path /api/*
    reverse_proxy @api host.docker.internal:45457

    # Route admin / websocket traffic (mockttp/admin) to the admin port (45456).
    # The server's admin/mockttp runs on 45456 and provides websockets & admin endpoints.
    @ws path /ws/* /socket/* /events/* /admin/*
    reverse_proxy @ws host.docker.internal:45456

    try_files {path} /index.html
    file_server

    @get method GET
    header @get Cache-Control "public, max-age=60, s-maxage=3600, stale-while-revalidate=600, stale-if-error=86400"

    header {
        Referrer-Policy "strict-origin"
        X-Clacks-Overhead "GNU Terry Pratchett"
    }

    import /site/csp.caddyfile
}